apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres # Sets Deployment name
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:15.1-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432 # Exposes container port
          env:
            - name: POSTGRES_DB
              value: nemesis
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                    name: postgres-creds
                    key: postgres-user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                    name: postgres-creds
                    key: postgres-password
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgredb
            - name: postgres-nemesis-schema
              mountPath: /docker-entrypoint-initdb.d/nemesis.sql
              subPath: nemesis.sql
              readOnly: true
      volumes:
        - name: postgres-nemesis-schema
          configMap:
            name: postgres-nemesis-schema

        {{- if eq .Values.operation.environment "production"}}
        # Have data persist across runs (for prod)
        - name: postgredb
          persistentVolumeClaim:
            claimName: postgres-pv-claim
        {{- else }}
        # Use to have the DB wiped on each reboot (for dev)
        - name: postgredb
          emptyDir: {}
        {{- end }}
---
# the below is so we can reset the postgres password to whatever the updated value is
apiVersion: batch/v1
kind: Job
metadata:
  name: update-postgres-password
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: postgrespw-service-account
      containers:
      - name: kubectl-exec
        image: bitnami/kubectl:latest
        env:
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                  name: postgres-creds
                  key: postgres-password
        command: ["/bin/bash", "-c"]
        args:
          - >
            kubectl exec $(kubectl get pod --selector=app=postgres -o jsonpath={.items[0].metadata.name}) -- psql -U nemesis -c "ALTER USER nemesis PASSWORD '$POSTGRES_PASSWORD';" nemesis

        # command: ["kubectl", "exec", "-ti", "$(kubectl get pod --selector=app=postgres -o jsonpath={.items[0].metadata.name})", "--", "psql", "-U", "nemesis", "-c", "\"ALTER USER nemesis PASSWORD '$POSTGRES_PASSWORD';\"", "nemesis"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: postgrespw-role
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: postgrespw-role-binding
subjects:
- kind: ServiceAccount
  name: postgrespw-service-account
roleRef:
  kind: Role
  name: postgrespw-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: postgrespw-service-account